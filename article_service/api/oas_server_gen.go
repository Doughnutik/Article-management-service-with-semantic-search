// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ArticlesGet implements GET /articles operation.
	//
	// Получение списка статей.
	//
	// GET /articles
	ArticlesGet(ctx context.Context, params ArticlesGetParams) (ArticlesGetRes, error)
	// ArticlesIDDelete implements DELETE /articles/{id} operation.
	//
	// Удаление статьи.
	//
	// DELETE /articles/{id}
	ArticlesIDDelete(ctx context.Context, params ArticlesIDDeleteParams) (ArticlesIDDeleteRes, error)
	// ArticlesIDGet implements GET /articles/{id} operation.
	//
	// Получение статьи по ID.
	//
	// GET /articles/{id}
	ArticlesIDGet(ctx context.Context, params ArticlesIDGetParams) (ArticlesIDGetRes, error)
	// ArticlesIDPut implements PUT /articles/{id} operation.
	//
	// Обновление статьи.
	//
	// PUT /articles/{id}
	ArticlesIDPut(ctx context.Context, req *ArticleUpdate, params ArticlesIDPutParams) (ArticlesIDPutRes, error)
	// ArticlesPost implements POST /articles operation.
	//
	// Создание новой статьи.
	//
	// POST /articles
	ArticlesPost(ctx context.Context, req *ArticleCreate) (ArticlesPostRes, error)
	// ArticlesSearchPost implements POST /articles/search operation.
	//
	// Поиск статей по смыслу текста через SearchService.
	//
	// POST /articles/search
	ArticlesSearchPost(ctx context.Context, req *SearchRequest) (ArticlesSearchPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
